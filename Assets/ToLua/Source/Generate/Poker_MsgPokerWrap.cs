//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Poker_MsgPokerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Poker.MsgPoker), typeof(System.Object));
		L.RegFunction("GetCmd", GetCmd);
		L.RegFunction("SetCmd", SetCmd);
		L.RegFunction("GetStatus", GetStatus);
		L.RegFunction("SetStatus", SetStatus);
		L.RegFunction("SetBody", SetBody);
		L.RegFunction("GetLuaData", GetLuaData);
		L.RegFunction("Init", Init);
		L.RegFunction("New", _CreatePoker_MsgPoker);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePoker_MsgPoker(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Poker.MsgPoker obj = new Poker.MsgPoker();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Poker.MsgPoker.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCmd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Poker.MsgPoker obj = (Poker.MsgPoker)ToLua.CheckObject(L, 1, typeof(Poker.MsgPoker));
			ushort o = obj.GetCmd();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCmd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Poker.MsgPoker obj = (Poker.MsgPoker)ToLua.CheckObject(L, 1, typeof(Poker.MsgPoker));
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
			obj.SetCmd(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStatus(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Poker.MsgPoker obj = (Poker.MsgPoker)ToLua.CheckObject(L, 1, typeof(Poker.MsgPoker));
			ushort o = obj.GetStatus();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetStatus(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Poker.MsgPoker obj = (Poker.MsgPoker)ToLua.CheckObject(L, 1, typeof(Poker.MsgPoker));
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
			obj.SetStatus(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBody(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Poker.MsgPoker), typeof(LuaInterface.LuaByteBuffer)))
			{
				Poker.MsgPoker obj = (Poker.MsgPoker)ToLua.ToObject(L, 1);
				LuaByteBuffer arg0 = new LuaByteBuffer(ToLua.CheckByteBuffer(L, 2));
				obj.SetBody(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Poker.MsgPoker), typeof(byte[])))
			{
				Poker.MsgPoker obj = (Poker.MsgPoker)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.SetBody(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Poker.MsgPoker.SetBody");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLuaData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Poker.MsgPoker obj = (Poker.MsgPoker)ToLua.CheckObject(L, 1, typeof(Poker.MsgPoker));
			LuaInterface.LuaByteBuffer o = obj.GetLuaData();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Poker.MsgPoker obj = (Poker.MsgPoker)ToLua.CheckObject(L, 1, typeof(Poker.MsgPoker));
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
			LuaFramework.ByteBuffer arg1 = (LuaFramework.ByteBuffer)ToLua.CheckObject(L, 3, typeof(LuaFramework.ByteBuffer));
			obj.Init(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

